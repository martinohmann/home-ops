---
# yaml-language-server: $schema=https://kubernetes-schemas.18b.haus/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 2h
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 77.5.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 2
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: longhorn
      namespace: longhorn-system
    - name: thanos
      namespace: monitoring
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      route:
        main:
          enabled: true
          annotations:
            gethomepage.dev/enabled: "true"
            gethomepage.dev/group: Observability
            gethomepage.dev/icon: alertmanager.png
            gethomepage.dev/name: Alertmanager
            gethomepage.dev/pod-selector: app.kubernetes.io/name=alertmanager
          hostnames:
            - alertmanager.18b.haus
          parentRefs:
            - name: internal
              namespace: networking
              sectionName: https
      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m
        externalUrl: https://alertmanager.18b.haus/
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 100Mi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      revisionHistoryLimit: 3

      metricLabelsAllowlist:
        - "deployments=[*]"
        - "persistentvolumeclaims=[*]"
        - "pods=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              regex: ^(.*)$
              replacement: $1
              targetLabel: kubernetes_node
      customResourceState:
        enabled: true
        # Add (Cluster)Role permissions to list/watch the customResources defined in the config to rbac.extraRules
        config:
          kind: CustomResourceStateMetrics
          spec:
            resources:
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "Gateway"
                  version: "v1"
                metricNamePrefix: gatewayapi_gateway
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "info"
                    help: "Gateway information"
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          gatewayclass_name: [ spec, gatewayClassName ]
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "listener_info"
                    help: "Gateway listener information"
                    each:
                      type: Info
                      info:
                        path: [ spec, listeners ]
                        labelsFromPath:
                          listener_name: [ "name" ]
                          port: [ "port" ]
                          protocol: [ "protocol" ]
                          hostname: [ "hostname" ]
                          tls_mode: [ "tls","mode" ]
                          allowed_routes_namespaces_from: [ "allowedRoutes", "namespaces", "from" ]
                  - name: "status"
                    help: "status condition"
                    each:
                      type: Gauge
                      gauge:
                        path: [ status, conditions ]
                        labelsFromPath:
                          type: [ "type" ]
                        valueFrom: [ "status" ]
                  - name: "status_listener_attached_routes"
                    help: "Number of attached routes for a listener"
                    each:
                      type: Gauge
                      gauge:
                        path: [ status, listeners ]
                        labelsFromPath:
                          listener_name: [ "name" ]
                        valueFrom: [ "attachedRoutes" ]
                  - name: "status_address_info"
                    help: "Gateway address types and values"
                    each:
                      type: Info
                      info:
                        path: [ status, addresses ]
                        labelsFromPath:
                          type: [ "type" ]
                          value: [ "value" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "GatewayClass"
                  version: "v1"
                metricNamePrefix: gatewayapi_gatewayclass
                labelsFromPath:
                  name:
                    - metadata
                    - name
                metrics:
                  - name: "info"
                    help: "GatewayClass information"
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          controller_name: [ spec, controllerName ]
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "status"
                    help: "status condition"
                    each:
                      type: Gauge
                      gauge:
                        path: [ status, conditions ]
                        labelsFromPath:
                          type: [ "type" ]
                        valueFrom: [ "status" ]
                  - name: "status_supported_features"
                    help: "List of supported features for the GatewayClass"
                    each:
                      type: Info
                      info:
                        path: [ status, supportedFeatures ]
                        labelsFromPath:
                          features: [ ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "HTTPRoute"
                  version: "v1"
                metricNamePrefix: gatewayapi_httproute
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "hostname_info"
                    help: "Hostname information"
                    each:
                      type: Info
                      info:
                        path: [ spec, hostnames ]
                        labelsFromPath:
                          hostname: [ ]
                  - name: "parent_info"
                    help: "Parent references that the httproute wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, parentRefs ]
                        labelsFromPath:
                          parent_group: [ "group" ]
                          parent_kind: [ "kind" ]
                          parent_name: [ "name" ]
                          parent_namespace: [ "namespace" ]
                          parent_section_name: [ "sectionName" ]
                          parent_port: [ "port" ]
                  - name: "status_parent_info"
                    help: "Parent references that the httproute is attached to"
                    each:
                      type: Info
                      info:
                        path: [ status, parents ]
                        labelsFromPath:
                          controller_name: [ "controllerName" ]
                          parent_group: [ "parentRef", "group" ]
                          parent_kind: [ "parentRef", "kind" ]
                          parent_name: [ "parentRef", "name" ]
                          parent_namespace: [ "parentRef", "namespace" ]
                          parent_section_name: [ "parentRef", "sectionName" ]
                          parent_port: [ "parentRef", "port" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "GRPCRoute"
                  version: "v1"
                metricNamePrefix: gatewayapi_grpcroute
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "hostname_info"
                    help: "Hostname information"
                    each:
                      type: Info
                      info:
                        path: [ spec, hostnames ]
                        labelsFromPath:
                          hostname: [ ]
                  - name: "parent_info"
                    help: "Parent references that the grpcroute wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, parentRefs ]
                        labelsFromPath:
                          parent_group: [ "group" ]
                          parent_kind: [ "kind" ]
                          parent_name: [ "name" ]
                          parent_namespace: [ "namespace" ]
                          parent_section_name: [ "sectionName" ]
                          parent_port: [ "port" ]
                  - name: "status_parent_info"
                    help: "Parent references that the grpcroute is attached to"
                    each:
                      type: Info
                      info:
                        path: [ status, parents ]
                        labelsFromPath:
                          controller_name: [ "controllerName" ]
                          parent_group: [ "parentRef", "group" ]
                          parent_kind: [ "parentRef", "kind" ]
                          parent_name: [ "parentRef", "name" ]
                          parent_namespace: [ "parentRef", "namespace" ]
                          parent_section_name: [ "parentRef", "sectionName" ]
                          parent_port: [ "parentRef", "port" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "TCPRoute"
                  version: "v1alpha2"
                metricNamePrefix: gatewayapi_tcproute
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "parent_info"
                    help: "Parent references that the tcproute wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, parentRefs ]
                        labelsFromPath:
                          parent_group: [ "group" ]
                          parent_kind: [ "kind" ]
                          parent_name: [ "name" ]
                          parent_namespace: [ "namespace" ]
                          parent_section_name: [ "sectionName" ]
                          parent_port: [ "port" ]
                  - name: "status_parent_info"
                    help: "Parent references that the tcproute is attached to"
                    each:
                      type: Info
                      info:
                        path: [ status, parents ]
                        labelsFromPath:
                          controller_name: [ "controllerName" ]
                          parent_group: [ "parentRef", "group" ]
                          parent_kind: [ "parentRef", "kind" ]
                          parent_name: [ "parentRef", "name" ]
                          parent_namespace: [ "parentRef", "namespace" ]
                          parent_section_name: [ "parentRef", "sectionName" ]
                          parent_port: [ "parentRef", "port" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "TLSRoute"
                  version: "v1alpha2"
                metricNamePrefix: gatewayapi_tlsroute
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "hostname_info"
                    help: "Hostname information"
                    each:
                      type: Info
                      info:
                        path: [ spec, hostnames ]
                        labelsFromPath:
                          hostname: [ ]
                  - name: "parent_info"
                    help: "Parent references that the tlsroute wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, parentRefs ]
                        labelsFromPath:
                          parent_group: [ "group" ]
                          parent_kind: [ "kind" ]
                          parent_name: [ "name" ]
                          parent_namespace: [ "namespace" ]
                          parent_section_name: [ "sectionName" ]
                          parent_port: [ "port" ]
                  - name: "status_parent_info"
                    help: "Parent references that the tlsroute is attached to"
                    each:
                      type: Info
                      info:
                        path: [ status, parents ]
                        labelsFromPath:
                          controller_name: [ "controllerName" ]
                          parent_group: [ "parentRef", "group" ]
                          parent_kind: [ "parentRef", "kind" ]
                          parent_name: [ "parentRef", "name" ]
                          parent_namespace: [ "parentRef", "namespace" ]
                          parent_section_name: [ "parentRef", "sectionName" ]
                          parent_port: [ "parentRef", "port" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "UDPRoute"
                  version: "v1alpha2"
                metricNamePrefix: gatewayapi_udproute
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "parent_info"
                    help: "Parent references that the udproute wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, parentRefs ]
                        labelsFromPath:
                          parent_group: [ "group" ]
                          parent_kind: [ "kind" ]
                          parent_name: [ "name" ]
                          parent_namespace: [ "namespace" ]
                          parent_section_name: [ "sectionName" ]
                          parent_port: [ "port" ]
                  - name: "status_parent_info"
                    help: "Parent references that the udproute is attached to"
                    each:
                      type: Info
                      info:
                        path: [ status, parents ]
                        labelsFromPath:
                          controller_name: [ "controllerName" ]
                          parent_group: [ "parentRef", "group" ]
                          parent_kind: [ "parentRef", "kind" ]
                          parent_name: [ "parentRef", "name" ]
                          parent_namespace: [ "parentRef", "namespace" ]
                          parent_section_name: [ "parentRef", "sectionName" ]
                          parent_port: [ "parentRef", "port" ]
              - groupVersionKind:
                  group: gateway.networking.k8s.io
                  kind: "BackendTLSPolicy"
                  version: "v1alpha3"
                metricNamePrefix: gatewayapi_backendtlspolicy
                labelsFromPath:
                  name:
                    - metadata
                    - name
                  namespace:
                    - metadata
                    - namespace
                metrics:
                  - name: "labels"
                    help: "Kubernetes labels converted to Prometheus labels."
                    each:
                      type: Info
                      info:
                        path: [ metadata ]
                        labelsFromPath:
                          "*": [ labels ]
                  - name: "created"
                    help: "created timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, creationTimestamp ]
                  - name: "deleted"
                    help: "deletion timestamp"
                    each:
                      type: Gauge
                      gauge:
                        path: [ metadata, deletionTimestamp ]
                  - name: "target_info"
                    help: "Target references that the backendtlspolicy wants to be attached to"
                    each:
                      type: Info
                      info:
                        path: [ spec, targetRef ]
                        labelsFromPath:
                          target_group: [ "group" ]
                          target_kind: [ "kind" ]
                          target_name: [ "name" ]
                          target_namespace: [ "namespace" ]
      rbac:
        extraRules:
          - apiGroups:
              - "gateway.networking.k8s.io"
            resources:
              - gateways
              - gatewayclasses
              - httproutes
              - grpcroutes
              - tcproutes
              - tlsroutes
              - udproutes
              - backendtlspolicies
            verbs:
              - list
              - watch
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            sourceLabels: ["__name__"]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|spegel|storage_operation|volume_manager|volume_operation|workqueue)_(.+)
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            sourceLabels: ["__name__"]
            regex: (aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)
          # Drop high cardinality labels
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.40.10
        - 192.168.40.11
        - 192.168.40.12
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|attachdetach_controller|authenticated_user|authentication|cronjob_controller|disabled_metric|endpoint_slice|ephemeral_volume|garbagecollector_controller|get_token|go|hidden_metric|job_controller|kubernetes_build|kubernetes_feature|leader_election|node_collector|node_ipam|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|pv_collector|registered_metric|replicaset_controller|rest_client|retroactive_storageclass|root_ca|running_managed|scrape_duration|scrape_samples|scrape_series|service_controller|storage_count|storage_operation|ttl_after|volume_operation|workqueue)_(.+)"
    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.40.10
        - 192.168.40.11
        - 192.168.40.12
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.40.10
        - 192.168.40.11
        - 192.168.40.12
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authenticated_user|authentication|disabled_metric|go|hidden_metric|kubernetes_build|kubernetes_feature|leader_election|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scheduler|scrape_duration|scrape_samples|scrape_series|workqueue)_(.+)"
    kubeProxy:
      enabled: false
    prometheus:
      route:
        main:
          enabled: true
          annotations:
            gethomepage.dev/enabled: "true"
            gethomepage.dev/group: Observability
            gethomepage.dev/icon: prometheus.png
            gethomepage.dev/name: Prometheus (main)
            gethomepage.dev/pod-selector: app.kubernetes.io/name=prometheus
          hostnames:
            - prometheus.18b.haus
          parentRefs:
            - name: internal
              namespace: networking
              sectionName: https
      prometheusSpec:
        podMetadata:
          annotations:
            secret.reloader.stakater.com/reload: &secret thanos-objstore-config
        replicas: 1
        replicaExternalLabelName: __replica__
        scrapeInterval: 1m  # Must match interval in Grafana Helm chart
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 4d
        retentionSize: 10GB
        externalUrl: https://prometheus.18b.haus/
        externalLabels:
          cluster: main
        resources:
          requests:
            cpu: 250m
            memory: 2Gi
          limits:
            memory: 4Gi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 15Gi
        thanos:
          image: quay.io/thanos/thanos:${THANOS_VERSION}
          version: "${THANOS_VERSION#v}"
          objectStorageConfig:
            existingSecret:
              name: *secret
              key: config
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
    prometheusOperator:
      fullnameOverride: prometheus-operator
      revisionHistoryLimit: 3
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
            global:
              enabled: true
  postRenderers:
    - kustomize:
        patches:
          - target:
              version: v1
              kind: ConfigMap
              labelSelector: grafana_dashboard in (1)
            patch: |-
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: not-used
                namespace: not-used
                annotations:
                  grafana_folder: Kubernetes
