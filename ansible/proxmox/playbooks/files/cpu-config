#!/usr/bin/env bash

set -euo pipefail

info() { echo "❯ $*"; }
error() { echo "error: $*" >&2; }

usage() {
  cat <<EOS
usage: $(basename "$0") [command] [<options>]

Configures CPU scaling and power.

commands:
  set             Set CPU configuration.
  show            Show current configuration.
  help            Show this help and exit.

set command options:
  -g|--scaling-governor [governor]
                  Configures the CPU scaling governor (default: $scaling_governor).

  -p|--energy-performance-preference [preference]
                  Configures the CPU energy performance preference (default: $energy_performance_preference).

     --no-turbo   Disable Intel turbo boost.
     --turbo      Enable Intel turbo boost.

global options:
  -h|--help       Show this help and exit.
EOS
}

in_array() {
  local needle="$1"; shift

  for item in "$@"; do
    if [[ "$item" == "$needle" ]]; then
      return 0
    fi
  done

  return 1
}

intel_pstate_get() {
  cat /sys/devices/system/cpu/intel_pstate/"$1"
}

intel_pstate_set() {
  echo "$2" | tee /sys/devices/system/cpu/intel_pstate/"$1" > /dev/null
}

cpufreq_get() {
  cat /sys/devices/system/cpu/cpu0/cpufreq/"$1"
}

cpufreq_set() {
  echo "$2" | tee /sys/devices/system/cpu/cpu*/cpufreq/"$1" > /dev/null
}

show_config() {
  info "scaling_governor              = $(cpufreq_get scaling_governor)"
  info "energy_performance_preference = $(cpufreq_get energy_performance_preference)"
  info "no_turbo                      = $(intel_pstate_get no_turbo)"
}

update_config() {
  if [ "$scaling_governor" != "$(cpufreq_get scaling_governor)" ]; then
    info "setting scaling_governor = $scaling_governor"
    cpufreq_set scaling_governor "$scaling_governor"
  fi

  if [ "$energy_performance_preference" != "$(cpufreq_get energy_performance_preference)" ]; then
    info "setting energy_performance_preference = $energy_performance_preference"
    cpufreq_set energy_performance_preference "$energy_performance_preference"
  fi

  if [ "$no_turbo" != "$(intel_pstate_get no_turbo)" ]; then
    info "setting no_turbo = $no_turbo"
    intel_pstate_set no_turbo "$no_turbo"
  fi
}

require_opt_arg() {
  if [ $# -lt 2 ] || [[ "$2" == -* ]]; then
    error "$1 requires an argument"
    exit 1
  fi
}

main() {
  if [ $# -lt 1 ]; then
    usage
    exit 1
  fi

  cmd="$1"; shift

  case "$cmd" in
    -h|--help|help)
      usage ;;
    show)
      show_config ;;
    set)
      while [ $# -gt 0 ]; do
        case "$1" in
          -h|--help)
            usage; exit ;;
          -g|--scaling-governor)
            require_opt_arg "$@"
            scaling_governor="$2"; shift ;;
          -p|--energy-performance-preference)
            require_opt_arg "$@"
            energy_performance_preference="$2"; shift ;;
          --no-turbo)
            no_turbo=1 ;;
          --turbo)
            no_turbo=0 ;;
          -*)
            error "unrecognized option $1"
            exit 1 ;;
          *)
            error "unexpected argument '$1'"
            exit 1 ;;
        esac
        shift
      done

      available_scaling_governors="$(cpufreq_get scaling_available_governors)"

      # shellcheck disable=SC2086
      if ! in_array "$scaling_governor" $available_scaling_governors; then
        error "unsupported scaling governor '$scaling_governor', expected one of: $available_scaling_governors"
        exit 1
      fi

      available_energy_performance_preferences="$(cpufreq_get energy_performance_available_preferences)"

      # shellcheck disable=SC2086
      if ! in_array "$energy_performance_preference" $available_energy_performance_preferences; then
        error "unsupported energy performance preference '$energy_performance_preference'," \
          "expected one of: $available_energy_performance_preferences"
        exit 1
      fi

      update_config ;;
    *)
      error "unsupported subcommand $cmd"
      exit 1 ;;
  esac

}

cmd=
energy_performance_preference="$(cpufreq_get energy_performance_preference)"
no_turbo=$(intel_pstate_get no_turbo)
scaling_governor="$(cpufreq_get scaling_governor)"

main "$@"
