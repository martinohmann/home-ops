#!/usr/bin/env bash

set -euo pipefail

info() { echo "❯ $*"; }
error() { echo "error: $*" >&2; }

usage() {
  cat <<EOS
usage: $(basename "$0") [command] [<options>]

Configures CPU scaling and power.

commands:
  set             Set CPU configuration.
  show            Show current configuration.
  help            Show this help and exit.

set command options:
  -g|--scaling-governor [governor]
                  Configures the CPU scaling governor.

     --scaling-max-freq [freq]
                  Maximum scaling frequency in kilohertz.

     --scaling-min-freq [freq]
                  Minimum scaling frequency in kilohertz.

  -p|--energy-performance-preference [preference]
                  Configures the CPU energy performance preference.

     --no-turbo   Disable Intel turbo boost.
     --turbo      Enable Intel turbo boost.

global options:
  -h|--help       Show this help and exit.
EOS
}

in_array() {
  local needle="$1"; shift

  for item in "$@"; do
    if [[ "$item" == "$needle" ]]; then
      return 0
    fi
  done

  return 1
}

intel_pstate_get() {
  cat /sys/devices/system/cpu/intel_pstate/"$1"
}

intel_pstate_set() {
  info "setting intel_pstate/$1 = $2"
  echo "$2" | tee /sys/devices/system/cpu/intel_pstate/"$1" > /dev/null
}

cpufreq_get() {
  cat /sys/devices/system/cpu/cpu0/cpufreq/"$1"
}

cpufreq_set() {
  info "setting cpufreq/$1 = $2"
  echo "$2" | tee /sys/devices/system/cpu/cpu*/cpufreq/"$1" > /dev/null
}

show_config() {
  info "cpufreq/cpuinfo_max_freq              = $(cpufreq_get cpuinfo_max_freq)"
  info "cpufreq/cpuinfo_min_freq              = $(cpufreq_get cpuinfo_min_freq)"
  info "cpufreq/energy_performance_preference = $(cpufreq_get energy_performance_preference)"
  info "cpufreq/scaling_governor              = $(cpufreq_get scaling_governor)"
  info "cpufreq/scaling_max_freq              = $(cpufreq_get scaling_max_freq)"
  info "cpufreq/scaling_min_freq              = $(cpufreq_get scaling_min_freq)"
  info "intel_pstate/no_turbo                 = $(intel_pstate_get no_turbo)"
}

set_config() {
  min_freq="$(cpufreq_get cpuinfo_min_freq)"
  max_freq="$(cpufreq_get cpuinfo_max_freq)"

  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        usage; exit ;;
      -g|--scaling-governor)
        require_opt_arg "$@"

        available_scaling_governors="$(cpufreq_get scaling_available_governors)"

        # shellcheck disable=SC2086
        if ! in_array "$2" $available_scaling_governors; then
          error "unsupported scaling governor '$2', expected one of: $available_scaling_governors"
          exit 1
        fi

        cpufreq_set scaling_governor "$2"

        shift ;;
      --scaling-max-freq)
        require_opt_arg "$@"

        if [ "$2" -lt "$min_freq" ] || [ "$2" -gt "$max_freq" ]; then
          error "maximum scaling frequency $2 out of range [$min_freq, $max_freq]"
          exit 1
        fi

        cpufreq_set scaling_max_freq "$2"

        shift ;;
      --scaling-min-freq)
        require_opt_arg "$@"

        if [ "$2" -lt "$min_freq" ] || [ "$2" -gt "$max_freq" ]; then
          error "minimum scaling frequency $2 out of range [$min_freq, $max_freq]"
          exit 1
        fi

        cpufreq_set scaling_min_freq "$2"

        shift ;;
      -p|--energy-performance-preference)
        require_opt_arg "$@"

        available_energy_performance_preferences="$(cpufreq_get energy_performance_available_preferences)"

        # shellcheck disable=SC2086
        if ! in_array "$2" $available_energy_performance_preferences; then
          error "unsupported energy performance preference '$2'," \
            "expected one of: $available_energy_performance_preferences"
          exit 1
        fi

        cpufreq_set energy_performance_preference "$2"

        shift ;;
      --no-turbo)
        intel_pstate_set no_turbo 1 ;;
      --turbo)
        intel_pstate_set no_turbo 0 ;;
      -*)
        error "unrecognized option $1"
        exit 1 ;;
      *)
        error "unexpected argument '$1'"
        exit 1 ;;
    esac
    shift
  done
}

require_opt_arg() {
  if [ $# -lt 2 ] || [[ "$2" == -* ]]; then
    error "$1 requires an argument"
    exit 1
  fi
}

main() {
  if [ $# -lt 1 ]; then
    usage
    exit 1
  fi

  cmd="$1"; shift

  case "$cmd" in
    -h|--help|help)
      usage ;;
    show)
      show_config ;;
    set)
      set_config "$@" ;;
    *)
      error "unsupported subcommand $cmd"
      exit 1 ;;
  esac

}

main "$@"
