---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

x-env: &env
  app: '{{.app}}'
  ns: '{{.ns}}'
  ts: '{{.ts}}'

vars:
  resources: '{{.ROOT_DIR}}/.taskfiles/VolSync/resources'
  ts: '{{now | date "150405"}}'

  kubectx:
    sh: kubectx --current
  kubens:
    sh: kubens --current

tasks:
  suspend:
    desc: Suspends Volsync
    summary: |
      Args:
        cluster: Cluster to run command against
    cmds:
      - flux --context {{.cluster}} suspend ks volsync
      - flux --context {{.cluster}} suspend hr -n volsync-system volsync
      - kubectl --context {{.cluster}} -n volsync-system scale deployment volsync --replicas 0
    env: *env
    vars:
      cluster: '{{.cluster | default .kubectx}}'

  list:
    desc: List snapshots for an application
    summary: |
      Args:
        cluster: Cluster to run command against
        ns: Namespace the PVC is in
        app: Application to list snapshots for (required)
    cmds:
      - envsubst < <(cat {{.resources}}/list.tmpl.yaml) | kubectl --context {{.cluster}} apply -f -
      - bash {{.resources}}/wait.sh list-{{.app}}-{{.ts}} {{.cluster}} {{.ns}}
      - kubectl --context {{.cluster}} -n {{.ns}} wait job/list-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl --context {{.cluster}} -n {{.ns}} logs job/list-{{.app}}-{{.ts}} --container list
      - kubectl --context {{.cluster}} -n {{.ns}} delete job list-{{.app}}-{{.ts}}
    env: *env
    requires:
      vars: ["app"]
    vars:
      cluster: '{{.cluster | default .kubectx}}'
      ns: '{{.ns | default .kubens}}'
    preconditions:
      - msg: "Wait script not found"
        sh: "test -f {{.resources}}/wait.sh"
      - msg: "List template not found"
        sh: "test -f {{.resources}}/list.tmpl.yaml"
    silent: true

  unlock:
    desc: Unlock a Restic repository for an application
    summary: |
      Args:
        cluster: Cluster to run command against
        ns: Namespace the PVC is in
        app: Application to unlock (required)
    cmds:
      - envsubst < <(cat {{.resources}}/unlock.tmpl.yaml) | kubectl --context {{.cluster}} apply -f -
      - bash {{.resources}}/wait.sh unlock-{{.app}}-{{.ts}} {{.cluster}} {{.ns}}
      - kubectl --context {{.cluster}} -n {{.ns}} wait job/unlock-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl --context {{.cluster}} -n {{.ns}} logs job/unlock-{{.app}}-{{.ts}} --container unlock
      - kubectl --context {{.cluster}} -n {{.ns}} delete job unlock-{{.app}}-{{.ts}}
    env: *env
    requires:
      vars: ["app"]
    vars:
      cluster: '{{.cluster | default .kubectx}}'
      ns: '{{.ns | default .kubens}}'
    preconditions:
      - msg: "Wait script not found"
        sh: "test -f {{.resources}}/wait.sh"
      - msg: "Unlock template not found"
        sh: "test -f {{.resources}}/unlock.tmpl.yaml"
    silent: true

  cleanup:
    desc: Delete volume populator PVCs in all namespaces
    summary: |
      Args:
        cluster: Cluster to run command against
    cmds:
      - for:
          var: snap
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --context {{.cluster}} delete volumesnapshot -n {{ $items._0 }} {{ $items._1 }}
      - for:
          var: dest
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --context {{.cluster}} delete pvc -n {{ $items._0 }} {{ $items._1 }}
      - for:
          var: cache
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --context {{.cluster}} delete pvc -n {{ $items._0 }} {{ $items._1 }}
    env: *env
    vars:
      cluster: '{{.cluster | default .kubectx}}'
      snap:
        sh: kubectl --context {{.cluster}} get volumesnapshot --all-namespaces --no-headers | grep "dst-dest" | awk '{print $1 "/" $2}'
      dest:
        sh: kubectl --context {{.cluster}} get pvc --all-namespaces --no-headers | grep "dst-dest" | awk '{print $1 "/" $2}'
      cache:
        sh: kubectl --context {{.cluster}} get pvc --all-namespaces --no-headers | grep "dst-cache" | awk '{print $1 "/" $2}'
